# -*- coding: utf-8 -*-
"""Proyek Akhir.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lxVrSdmzvKMx6aJoXUhrWYjC9HGdSIwX

Link Dataset : https://grouplens.org/datasets/movielens/latest/

#Data Understanding

##Data Ghaterring
"""

#unduh dataset ke lokal
!wget http://files.grouplens.org/datasets/movielens/ml-latest-small.zip

#unzip dataset
!unzip /content/ml-latest-small.zip

"""##Data Asessing"""

#install library surprise
!pip install scikit-surprise

#Import Library yang dibutuhkan
import pandas as pd
from surprise.model_selection import train_test_split
from surprise import Dataset, Reader
import numpy as np
from keras.models import Sequential
from keras.layers import Embedding, Flatten, Dense
from surprise import NMF
from surprise import SVD
from surprise import KNNBasic
from surprise import accuracy
import matplotlib.pyplot as plt
import seaborn as sns

#tampilkan dataframe ratings
rating = pd.read_csv('/content/ml-latest-small/ratings.csv')
rating.head()

#tampilkan dataframe movies
movie = pd.read_csv('/content/ml-latest-small/movies.csv')
movie.head()

"""Gabungkan data agar lebih mudah"""

#Gabungkan kedua dataframe berdasarkan movieId lalu inisisalisasi pada variabel data
data = pd.merge(rating, movie, on='movieId')
data.head()

"""- jumlah data 100836
- userId sudah berbentuk int
- movieId sudah berbentuk integer
- rating sudah berbentuk float
"""

#tapilkan info dataframe
data.info()

"""Tidak ada data yang Missing"""

#tampilkan jumlah missing value setiap column
data.isna().sum()

#tampilkan jumlah data duplikat pada  dataframe
data.duplicated().sum()

"""##EDA"""

rating_counts = data['rating'].value_counts().sort_index()
plt.figure(figsize=(6, 5))
sns.barplot(x=rating_counts.index, y=rating_counts.values, palette="viridis")
plt.title('Jumlah Rating Berdasarkan Jenis Rating')
plt.xlabel('Rating')
plt.ylabel('Jumlah')
plt.show()

data['genres'] = data['genres'].str.split('|')
merged_data = data.explode('genres')

# Visualisasi distribusi rating berdasarkan genre
plt.figure(figsize=(14, 8))
sns.boxplot(x='genres', y='rating', data=merged_data, palette="viridis")
plt.xticks(rotation=90)
plt.title('Distribusi Rating Berdasarkan Genre')
plt.xlabel('Genre')
plt.ylabel('Rating')
plt.show()

"""#Data Preparation

##See Data

karna userId dan movieId sudah berbentuk integer, jadi tidak perlu dilakukan tahap encoding
"""

#Cek jumlah user
count_user = len(data['userId'])
print(count_user)

#Cek jumlah movie
count_movie = len(data['movieId'])
print(count_movie)

#nilai min rating
min_rating = min(data['rating'])
print(min_rating)

#nilai min rating
max_rating = max(data['rating'])
print(max_rating)

"""##Split Data"""

#menentukan skala ratingnya
reader = Reader(rating_scale=(0.5, 5.0))

#data akhir dengan rating yang sudah ditentukan
data_last = Dataset.load_from_df(data[['userId', 'movieId', 'rating']], reader)

#bagi data ke train dan test
trainset, testset = train_test_split(data_last, test_size=0.2, random_state=42)

"""#Modeling dan Evaluasi

##Algoritma SVD
"""

# inisialisasi algoritma SVD
svd_model = SVD()

# Train latih model dengan trainset
svd_model.fit(trainset)

# evaluasi dengan testset
svd_predictions = svd_model.test(testset)

# hitung nilai RMSE (Root Mean Squared Error)
svd_rmse = accuracy.rmse(svd_predictions)
print(f'SVD RMSE: {svd_rmse}')

"""##KNN Basic"""

# inisialisasi model dengan algoritma KNNBasic
knn_model = KNNBasic()

# latih model dengan data training
knn_model.fit(trainset)

# evaluasi model dengan data test
knn_predictions = knn_model.test(testset)

# hitung nilai RMSE
knn_rmse = accuracy.rmse(knn_predictions)
print(f'KNNBasic RMSE: {knn_rmse}')

"""##NMF"""

# Innisialisasi model dengan algoritma NMF
nmf_model = NMF()

# latih model dengan data training
nmf_model.fit(trainset)

# Evaluasi model dengan data test
nmf_predictions = nmf_model.test(testset)

# hitung RMSE
nmf_rmse = accuracy.rmse(nmf_predictions)
print(f'NMF RMSE: {nmf_rmse}')

"""##Test sistem rekomendasi berdasarkan satu user dengan SVD"""

#random user
user_id = 12

# Film yang sudah ditonton oleh user
movies_watched_by_user = data[data['userId'] == user_id]

# Semua film yang tersedia
all_movie_ids = data['movieId'].unique()

# Film yang belum ditonton oleh user
movies_not_watched = [movie_id for movie_id in all_movie_ids if movie_id not in movies_watched_by_user['movieId'].values]

# Prediksi rating untuk film yang belum ditonton
ratings = [svd_model.predict(user_id, movie_id).est for movie_id in movies_not_watched]

# Pilih 10 film dengan rating tertinggi untuk direkomendasikan
top_ratings_indices = sorted(range(len(ratings)), key=lambda i: ratings[i], reverse=True)[:10]
recommended_movie_ids = [movies_not_watched[idx] for idx in top_ratings_indices]

# Tampilkan rekomendasi untuk user tertentu
print(f'Showing recommendations for user: {user_id}')
print('===' * 9)
print('Movies with high ratings from user')
print('----' * 8)

top_movies_user = (
    movies_watched_by_user.sort_values(
        by='rating',
        ascending=False
    )
    .head(5)['movieId'].values
)

movies_df_rows = movie[movie['movieId'].isin(top_movies_user)]
for row in movies_df_rows.itertuples():
    print(row.title, ':', row.genres)

print('----' * 8)
print('Top 10 movie recommendations')
print('----' * 8)

recommended_movies = movie[movie['movieId'].isin(recommended_movie_ids)]
for row in recommended_movies.itertuples():
    print(row.title, ':', row.genres)